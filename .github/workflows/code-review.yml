name: Code Review

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      - name: Install Dependencies
        run: npm install

      - name: Get PR Diff / Files Changed
        id: diff
        run: |
          if [ "${GITHUB_EVENT_NAME}" = "pull_request" ]; then
            BASE=${{ github.base_ref }}
            git fetch origin $BASE --depth=1
            git diff --name-only origin/$BASE > changed_files.txt
            git diff origin/$BASE > changes.diff
          else
            if [ "${{ github.event.before }}" = "0000000000000000000000000000000000000000" ]; then
              # first commit on branch
              git diff --name-only ${{ github.sha }} > changed_files.txt
              git show ${{ github.sha }} > changes.diff
            else
              git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
              git diff ${{ github.event.before }} ${{ github.sha }} > changes.diff
            fi
          fi

          echo "Changed files:"
          cat changed_files.txt

          echo "Preview of changes.diff (first 50 lines):"
          head -n 50 changes.diff

          printf "CHANGED_FILES='%s'\n" "$(cat changed_files.txt)" >> $GITHUB_ENV

      - name: Run ESLint
        run: |
          JS_FILES=$(grep -E '\.jsx?$' changed_files.txt || true)
          if [ -n "$JS_FILES" ]; then
            echo "Linting changed JS files:"
            echo "$JS_FILES"
            npm run lint -- $JS_FILES
          else
            echo "No changed JS files to lint"
          fi

      - name: AI Code Review with Gemini 2.5 Flash
        uses: actions/github-script@v7
        env:
          GCP_API_KEY: ${{ secrets.GCP_API_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            //Read the PR diff
            const diff = fs.readFileSync('changes.diff', 'utf-8');

            // Escape double quotes for JSON
            const escapedDiff = diff.replace(/"/g, '\\"');

            // Prepare the JSON payload for Gemini
            const body = {
              contents: [
                {
                  parts: [
                    {
                      text: `You are an AI code reviewer. Analyze the following code diff and provide concise review comments on bugs, readability, and best practices:\n\n${escapedDiff}`
                    }
                  ]
                }
              ]
            };
            // Call Gemini API
            const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent', {
              method: 'POST',
              headers: {
                'x-goog-api-key': process.env.GCP_API_KEY,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(body)
            });

            const data = await response.json();

            console.log('Full API response:', JSON.stringify(data, null, 2));

            let reviewText = data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

            if (!reviewText) {
              console.log("Skipping review: AI output empty or unhelpful.");
              return; // prevents trying to post an empty review
            }

            console.log('AI Review Output:\n', reviewText);

            // Post review comment on PR
            if (context.payload.pull_request) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                event: 'COMMENT',
                body: reviewText
              });
            } else {
              console.log("Not a pull request event, skipping PR review.");
            }
