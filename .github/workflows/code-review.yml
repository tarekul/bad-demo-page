name: AI Code Review

on:
  pull_request:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  code-review:
    runs-on: ubuntu-latest
    steps:
      # Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"

      # Install dependencies
      - name: Install Dependencies
        run: npm install

      # Get PR diff and filter code files
      - name: Get PR Diff / Code Files
        id: diff
        run: |
          BASE=${{ github.base_ref }}
          git fetch origin $BASE --depth=1

          # Define code file extensions
          CODE_EXTENSIONS="\.js$|\.jsx$|\.ts$|\.tsx$|\.py$|\.html$|\.css$|\.scss$|\.json$|\.java$|\.cpp$|\.c$|\.rb$|\.go$|\.rs$|\.php$|\.kt$|\.swift$|\.sh$"

          # List all changed files
          git diff --name-only origin/$BASE > changed_files.txt

          # Filter only code files
          grep -E "$CODE_EXTENSIONS" changed_files.txt > code_files.txt || true

          # Generate diff of code files only
          if [ -s code_files.txt ]; then
            git diff origin/$BASE -- $(cat code_files.txt) > changes.diff
          else
            echo "No code files changed."
            touch changes.diff
          fi

          echo "Changed code files:"
          cat code_files.txt

          # Save code files list to env
          printf "CHANGED_FILES='%s'\n" "$(cat code_files.txt)" >> $GITHUB_ENV

      # Run ESLint on JS/JSX code files
      - name: Run ESLint
        run: |
          JS_FILES=$(grep -E '\.jsx?$' code_files.txt || true)
          if [ -n "$JS_FILES" ]; then
            echo "Linting JS/JSX files:"
            echo "$JS_FILES"
            npm run lint -- $JS_FILES
          else
            echo "No JS/JSX files to lint."
          fi

      # AI Code Review with Gemini 2.5 Flash
      - name: AI Code Review
        uses: actions/github-script@v7
        env:
          GCP_API_KEY: ${{ secrets.GCP_API_KEY }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            // Read code diff
            const diff = fs.readFileSync('changes.diff', 'utf-8');

            // Sanitize diff: remove unprintable chars & escape quotes
            const sanitizedDiff = diff.replace(/[^\x20-\x7E\n]/g, '');
            const escapedDiff = sanitizedDiff.replace(/"/g, '\\"');

            if (!escapedDiff.trim()) {
              console.log("No code changes to review. Skipping AI comment.");
              return;
            }

            // Prepare AI payload
            const body = {
              contents: [
                {
                  parts: [
                    {
                      text: `You are an AI code reviewer. Analyze the following code diff and provide concise review comments on bugs, readability, and best practices:\n\n${escapedDiff}`
                    }
                  ]
                }
              ]
            };

            // Call Gemini API
            const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent', {
              method: 'POST',
              headers: {
                'x-goog-api-key': process.env.GCP_API_KEY,
                'Content-Type': 'application/json'
              },
              body: JSON.stringify(body)
            });

            const data = await response.json();
            const reviewText = data?.candidates?.[0]?.content?.parts?.[0]?.text?.trim();

            if (!reviewText) {
              console.log("AI returned no review text. Skipping PR comment.");
              return;
            }

            console.log("AI Review Output:\n", reviewText);

            // Post review comment on PR
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              event: 'COMMENT',
              body: reviewText
            });
